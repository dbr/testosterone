#!/usr/bin/env python

##
# Set aside a clean context for the test script.
##
import sys
__modules__ = sys.modules.copy()
# del __modules__['sys'] # afaict this doesn't actually unload the module :/
__globals__ = globals()
__locals__  = locals()



##
# Parse the command line args/opts.
##

arg = sys.argv[1:2]
if not arg:
    print "usage: $ pytest [-arh] [filename]"
    raise SystemExit
else:
    filename = arg[0]


##
# Instantiate our testing objects and execute the test.
##

import PyTest

heisenberg = PyTest.Observer(filename)
heisenberg.start_timer()

original = file(filename).read()
interpolated = PyTest.Interpolator.interpolate(original)

# sanitize sys.modules
sys.modules = __modules__

# turn stdout over to our tester, run the test, and then restore stdout
__globals__['__pytest__'] = sys.stdout = heisenberg
heisenberg.run(filename, interpolated, __globals__, __locals__)
sys.stdout = sys.__stdout__

heisenberg.stop_timer()
heisenberg.report()
