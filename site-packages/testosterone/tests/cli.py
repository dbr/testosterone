import os
import sys
import tempfile
import unittest

from testosterone.cli.reporters import detail, _Summarize


MODULE = """\
import unittest

class TestCase(unittest.TestCase):
    def test_foo(self):
        pass
    def test_bar(self):
        pass

class TestCase2(unittest.TestCase):
    def test_blam(self):
        pass

"""

_INIT__2 = """\
import unittest

class TestCase(unittest.TestCase):
    def test_foo(self):
        pass
    def test_bar(self):
        pass

class TestCase2(unittest.TestCase):
    pass

"""

_INIT__ = """\
import unittest

from testostertests import itDoesExist


def my_program():
    print 'Hey there!'

class TestCase(unittest.TestCase):

    def test_passes(self):
        self.assert_(1)

    def test_does_nothing(self):
        pass

    def test_fails(self):
        self.assert_(0)

    def test_errs(self):
        raise StandardError('heck')

    def test_prints_stuff(self):
        my_program()

"""

OUTPUT_START="""\
-------------------------------<| testosterone |>-------------------------------
.EF..
======================================================================
ERROR: test_errs (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):"""; """
<snip>
StandardError: heck

======================================================================
FAIL: test_fails (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
<snip>
AssertionError

----------------------------------------------------------------------
Ran 5 tests in 0.002s"""; OUTPUT_END="""

FAILED (failures=1, errors=1)
"""


REPORT_SUCCESS = """\
-------------------------------<| testosterone |>-------------------------------
..
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
"""



class reportersTestCase(unittest.TestCase):
    """A base class for reporter tests. Provides setUpUp and pkg hooks.

    """

    # fixture
    # =======

    def setUp(self):
        self.tmp = tempfile.gettempdir()
        self.site_packages = os.path.join(self.tmp, 'site-packages')
        sys.path.insert(0, self.site_packages)

        # [re]build a temporary package tree in /tmp/site-packages/
        self.removeTestPkg()
        self.buildTestPkg()

        if hasattr(self, 'setUpUp'):
            self.setUpUp()

    def tearDown(self):
        self.removeTestPkg()
        if self.site_packages in sys.path:
            sys.path.remove(self.site_packages)


    # test package
    # ============
    # pkg is a list of strings and tuples. If a string, it is interpreted as a
    # path to a directory that should be created. If a tuple, the first element
    # is a path to a file, the second is the contents of the file. You must use
    # forward slashes in your paths (they will be converted cross-platform). Any
    # leading slashes will be removed before they are interpreted.
    #
    # site_packages is the filesystem path under which to create the test site.
    #
    # pkg can be overriden, but be careful, because we don't do any magic module
    # reloading.

    site_packages = ''                                  # set in setUp
    pkg = [  'testostertests'                           # can be overriden
          , ('testostertests/__init__.py', _INIT__)
          , ('testostertests/itDoesExist.py', MODULE)
          ,  'testostertests/subpkg'
          , ('testostertests/subpkg/__init__.py', _INIT__2)
           ]

    def buildTestPkg(self):
        """Build the package described in self.pkg.
        """
        os.mkdir(self.site_packages)
        for item in self.pkg:
            if isinstance(item, basestring):
                path = self.convert_path(item.lstrip('/'))
                path = os.sep.join([self.site_packages, path])
                os.mkdir(path)
            elif isinstance(item, tuple):
                filepath, contents = item
                path = self.convert_path(filepath.lstrip('/'))
                path = os.sep.join([self.site_packages, path])
                file(path, 'w').write(contents)

    def removeTestPkg(self):
        """Remove the package described in self.pkg.
        """
        if not os.path.isdir(self.site_packages):
            return
        for root, dirs, files in os.walk(self.site_packages, topdown=False):
            for name in dirs:
                os.rmdir(os.path.join(root, name))
            for name in files:
                os.remove(os.path.join(root, name))
        os.rmdir(self.site_packages)

    def convert_path(self, path):
        """Given a Unix path, convert it for the current platform.
        """
        return os.sep.join(path.split('/'))

    def convert_paths(self, paths):
        """Given a tuple of Unix paths, convert them for the current platform.
        """
        return tuple([self.convert_path(p) for p in paths])



class Detail(reportersTestCase):

    def testNoDotTriggersNameError(self):
        self.assertRaises(NameError, detail, 'needsADot')

    def testBadModuleTriggersImportError(self):
        self.assertRaises(ImportError, detail, 'probablyDoesntExist.TestCase')

    def testBadTestCaseNameAlsoTriggersImportError(self):
        self.assertRaises(ImportError, detail, 'testostertests.ToastCase')

    def testBadTestCaseTriggersTypeError(self):
        self.assertRaises(TypeError, detail, 'testostertests.itDoesExist')

    def testReturnsNormalUnitTestOutputWithOurBanner(self):
        actual = detail('testostertests.TestCase')
        start = actual[:len(OUTPUT_START)]
        end = actual[-len(OUTPUT_END):]
        self.assertEqual(start, OUTPUT_START)
        self.assertEqual(end, OUTPUT_END)

    def testDoesntContainProgramOutput(self):
        actual = detail('testostertests.TestCase')
        start = actual[:len(OUTPUT_START)]
        end = actual[-len(OUTPUT_END):]
        self.assertEqual(start, OUTPUT_START)
        self.assertEqual(end, OUTPUT_END)

    def testTestCaseInSubmodulesWorks(self):
        expected = REPORT_SUCCESS
        actual = detail('testostertests.itDoesExist.TestCase')
        self.assertEqual(expected, actual)




HEADER = """\
-------------------------------<| testosterone |>-------------------------------
MODULE                                                       PASS FAIL  ERR  ALL
--------------------------------------------------------------------------------
"""

BODY = """\
testostertests.TestCase                                       60%    1    1    5
"""
BODY_VERBOSE = """\
testostertests.TestCase                                       60%    1    1    5
testostertests.itDoesExist.TestCase                          100%    0    0    2
testostertests.itDoesExist.TestCase2                         100%    0    0    1
testostertests.subpkg.TestCase                               100%    0    0    2
"""
BODY_FIND = """\
testostertests.TestCase                                        -     -    -    5
testostertests.itDoesExist.TestCase                            -     -    -    2
testostertests.itDoesExist.TestCase2                           -     -    -    1
testostertests.subpkg.TestCase                                 -     -    -    2
"""
BODY_DOTTED_RUN_VERBOSE = """\
testostertests.itDoesExist.TestCase                          100%    0    0    2
testostertests.itDoesExist.TestCase2                         100%    0    0    1
"""


TOTALS_BASIC = """\
--------------------------------------------------------------------------------
TOTALS                                                        50%    4    5   18
"""
TOTALS_BASIC_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -   18
"""
TOTALS_ZERO = """\
--------------------------------------------------------------------------------
TOTALS                                                         0%    0    0    0
"""
TOTALS_ZERO_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -    0
"""
TOTALS_ZERO_PERCENT = """\
--------------------------------------------------------------------------------
TOTALS                                                         0%    5    5   10
"""
TOTALS_ZERO_PERCENT_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -   10
"""
TOTALS_ALL_PASSING = """\
--------------------------------------------------------------------------------
TOTALS                                                       100%    0    0   10
"""
TOTALS_ALL_PASSING_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -   10
"""
TOTALS_SUMMARIZE = """\
--------------------------------------------------------------------------------
TOTALS                                                        80%    1    1   10
"""

SUMMARIZE = HEADER + BODY + TOTALS_SUMMARIZE


class Summary(reportersTestCase):

    def setUpUp(self):
        self.summarize = _Summarize()
        self.summarize.base = 'testostertests'
        self.summarize.quiet = True
        self.summarize.recursive = True
        self.summarize.run = True
        self.summarize.stopwords = ()


    # __call__
    # ========

    def testSummarize(self):
        expected = SUMMARIZE
        actual = self.summarize('testostertests')
        self.assertEqual(expected, actual)

    def testTestCaseTriggersImportError(self):
        self.assertRaises(ImportError, self.summarize, 'testostertests.TestCase')


    # load_testcases
    # ==============

    def testLoadTestCases(self):
        mod = __import__('testostertests')
        expected = [('testostertests.TestCase', mod.TestCase)]
        actual = self.summarize.load_testcases(mod)
        self.assertEqual(expected, actual)

    def testLoadTestCasesDottedAndMultiple(self):
        mod = __import__('testostertests.itDoesExist')
        expected = [ ( 'testostertests.itDoesExist.TestCase'
                     , mod.itDoesExist.TestCase
                      )
                   , ( 'testostertests.itDoesExist.TestCase2'
                     , mod.itDoesExist.TestCase2
                      )
                    ]
        actual = self.summarize.load_testcases(mod.itDoesExist)
        self.assertEqual(expected, actual)

    def testLoadTestCasesOnlyIfTheyHaveTests(self):
        mod = __import__('testostertests.subpkg')
        reload(mod.subpkg)
        expected = [ ( 'testostertests.subpkg.TestCase'
                     , mod.subpkg.TestCase
                      )
                    ]
        actual = self.summarize.load_testcases(mod.subpkg)
        self.assertEqual(expected, actual)
        self.setUp()
        reload(mod.itDoesExist)


    # find_testcases
    # ==============

    def testFindTestCases(self):
        self.summarize.base = 'testostertests'
        self.summarize.find_testcases()
        mod = __import__('testostertests')
        expected = [ ( 'testostertests.TestCase'
                     , mod.TestCase
                      )
                   , ( 'testostertests.itDoesExist.TestCase'
                     , mod.itDoesExist.TestCase
                      )
                   , ( 'testostertests.itDoesExist.TestCase2'
                     , mod.itDoesExist.TestCase2
                      )
                    ]
        actual = self.summarize._Summarize__testcases
        self.assertEqual(expected, actual)

    def testFindTestCasesNotRecursive(self):
        self.summarize.base = 'testostertests'
        self.summarize.recursive = False
        self.summarize.find_testcases()
        mod = __import__('testostertests')
        expected = [('testostertests.TestCase', mod.TestCase)]
        actual = self.summarize._Summarize__testcases
        self.assertEqual(expected, actual)

    def testFindTestCasesStopWords(self):
        self.summarize.base = 'testostertests'
        self.summarize.stopwords = ('Does',)
        self.summarize.find_testcases()
        mod = __import__('testostertests')
        expected = [('testostertests.TestCase', mod.TestCase)]
        actual = self.summarize._Summarize__testcases
        self.assertEqual(expected, actual)

    def testFindTestCasesEmptyStopWordsOk(self):
        self.summarize.base = 'testostertests'
        self.summarize.stopwords = ('',)
        self.summarize.find_testcases()
        mod = __import__('testostertests')
        expected = [ ( 'testostertests.TestCase'
                     , mod.TestCase
                      )
                   , ( 'testostertests.itDoesExist.TestCase'
                     , mod.itDoesExist.TestCase
                      )
                   , ( 'testostertests.itDoesExist.TestCase2'
                     , mod.itDoesExist.TestCase2
                      )
                    ]
        actual = self.summarize._Summarize__testcases
        self.assertEqual(expected, actual)


    # print_header
    # ============

    def testPrintHeader(self):
        self.summarize.print_header()
        actual = self.summarize.report.getvalue()
        expected = HEADER
        self.assertEqual(expected, actual)


    # print_body
    # ==========

    def testPrintBody(self):
        self.summarize.base = 'testostertests'
        self.summarize.find_testcases()
        self.summarize.print_body()

        expected = BODY
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)

        expected = (1, 1, 10)
        actual = self.summarize._Summarize__totals
        self.assertEqual(expected, actual)

    def testPrintBodyNotQuiet(self):
        self.summarize.base = 'testostertests'
        self.summarize.quiet = False
        self.summarize.find_testcases()
        self.summarize.print_body()

        expected = BODY_VERBOSE
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)

        expected = (1, 1, 10)
        actual = self.summarize._Summarize__totals
        self.assertEqual(expected, actual)

    def testPrintBodyNotQuietNotRecursive(self):
        self.summarize.base = 'testostertests'
        self.summarize.quiet = False
        self.summarize.recursive = False
        self.summarize.find_testcases()
        self.summarize.print_body()

        expected = BODY
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)

        expected = (1, 1, 5)
        actual = self.summarize._Summarize__totals
        self.assertEqual(expected, actual)

    def testPrintBodyNoRun(self):
        self.summarize.base = 'testostertests'
        self.summarize.run = False
        self.summarize.find_testcases()
        self.summarize.print_body()

        expected = BODY_FIND
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)

        expected = (0, 0, 10)
        actual = self.summarize._Summarize__totals
        self.assertEqual(expected, actual)

    def testPrintBodyBaseIsDotted(self):
        self.summarize.base = 'testostertests.itDoesExist'
        self.summarize.find_testcases()
        self.summarize.quiet = False
        self.summarize.print_body()

        expected = BODY_DOTTED_RUN_VERBOSE
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)

        expected = (0, 0, 3)
        actual = self.summarize._Summarize__totals
        self.assertEqual(expected, actual)



    # print_footer
    # ============

    def testPrintFooterBasicTotalsWithRun(self):
        self.summarize._Summarize__totals = (4, 5, 18)
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_BASIC
        self.assertEqual(expected, actual)

    def testPrintFooterBasicTotalsNoRun(self):
        self.summarize._Summarize__totals = (4, 5, 18)
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_BASIC_NO_RUN
        self.assertEqual(expected, actual)

    def testPrintFooterZeroTotalsWithRun(self):
        self.summarize._Summarize__totals = (0, 0, 0)
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO
        self.assertEqual(expected, actual)

    def testPrintFooterZeroTotalsNoRun(self):
        self.summarize._Summarize__totals = (0, 0, 0)
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO_NO_RUN
        self.assertEqual(expected, actual)

    def testPrintFooterZeroPercentWithRun(self):
        self.summarize._Summarize__totals = (5, 5, 10)
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO_PERCENT
        self.assertEqual(expected, actual)

    def testPrintFooterZeroPercentNoRun(self):
        self.summarize._Summarize__totals = (5, 5, 10)
        self.summarize.tfail = 5
        self.summarize.terr = 5
        self.summarize.tall = 10
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO_PERCENT_NO_RUN
        self.assertEqual(expected, actual)

    def testPrintFooterAllPassing(self):
        self.summarize._Summarize__totals = (0, 0, 10)
        self.summarize.tfail = 0
        self.summarize.terr = 0
        self.summarize.tall = 10
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ALL_PASSING
        self.assertEqual(expected, actual)

    def testPrintFooterAllPassingNoRun(self):
        self.summarize._Summarize__totals = (0, 0, 10)
        self.summarize.tfail = 0
        self.summarize.terr = 0
        self.summarize.tall = 10
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ALL_PASSING_NO_RUN
        self.assertEqual(expected, actual)
