import os
import sys
import tempfile
import unittest

from testosterone.cli.reporters import detail, _Summarize



DUMMY_MODULE = """\
import unittest

class TestCase(unittest.TestCase):

    def test_foo(self):
        pass

    def test_bar(self):
        pass

"""

DUMMY___INIT__ = """\
import unittest

from testostertests import itDoesExist


def my_program():
    print 'Hey there!'

class TestCase(unittest.TestCase):

    def test_passes(self):
        self.assert_(1)

    def test_does_nothing(self):
        pass

    def test_fails(self):
        self.assert_(0)

    def test_errs(self):
        raise StandardError('heck')

    def test_prints_stuff(self):
        my_program()

"""

DUMMY_OUTPUT_START="""\
-------------------------------<| testosterone |>-------------------------------
.EF..
======================================================================
ERROR: test_errs (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):"""; """
<snip>
StandardError: heck

======================================================================
FAIL: test_fails (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
<snip>
AssertionError

----------------------------------------------------------------------
Ran 5 tests in 0.002s"""; DUMMY_OUTPUT_END="""

FAILED (failures=1, errors=1)
"""


class reportersTestCase(unittest.TestCase):

    # fixture
    # =======

    def setUp(self):
        self.tmp = tempfile.gettempdir()
        self.path = os.path.join(self.tmp, 'testostertests')
        if not os.path.isdir(self.path):
            os.mkdir(self.path)
        sys.path.insert(0, self.tmp)

        MODULE = DUMMY_MODULE
        if hasattr(self, 'MODULE'):
            MODULE = self.MODULE

        for name in ('__init__.py', 'itDoesExist.py'):
            fpath = os.path.join(self.path, name)
            if os.path.isfile(fpath):
                os.remove(fpath)
            fp = open(fpath, 'w+')
            if name == '__init__.py':
                fp.write(DUMMY___INIT__)
            elif name == 'itDoesExist.py':
                fp.write(MODULE)
            fp.close()

        if hasattr(self, 'setUpUp'):
            self.setUpUp()


    def tearDown(self):
        for name in os.listdir(self.path):
            fpath = os.path.join(self.path, name)
            os.remove(fpath)
        os.rmdir(self.path)
        if self.tmp in sys.path:
            sys.path.remove(self.tmp)


class detailTestCase(reportersTestCase):

    def testFailsForBadModule(self):
        self.assertRaises(ImportError, detail, 'probablyDoesntExist')

    def testReturnsNormalUnitTestOutputWithOurBanner(self):
        actual = detail('testostertests')
        start = actual[:len(DUMMY_OUTPUT_START)]
        end = actual[-len(DUMMY_OUTPUT_END):]
        self.assertEqual(start, DUMMY_OUTPUT_START)
        self.assertEqual(end, DUMMY_OUTPUT_END)

    def testDoesntContainProgramOutput(self):
        actual = detail('testostertests')
        start = actual[:len(DUMMY_OUTPUT_START)]
        end = actual[-len(DUMMY_OUTPUT_END):]
        self.assertEqual(start, DUMMY_OUTPUT_START)
        self.assertEqual(end, DUMMY_OUTPUT_END)




DUMMY_HEADER = """\
-------------------------------<| testosterone |>-------------------------------
MODULE                                                       PASS FAIL  ERR  ALL
--------------------------------------------------------------------------------
"""

BODY = """\
testostertests                                                60%    1    1    5
"""
BODY_VERBOSE = """\
testostertests                                                60%    1    1    5
testostertests.itDoesExist                                   100%    0    0    2
"""
BODY_FIND = """\
testostertests                                                 -     -    -    5
testostertests.itDoesExist                                     -     -    -    2
"""


TOTALS_BASIC = """\
--------------------------------------------------------------------------------
TOTALS                                                        50%    4    5   18
"""
TOTALS_BASIC_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -   18
"""
TOTALS_ZERO = """\
--------------------------------------------------------------------------------
TOTALS                                                         0%    0    0    0
"""
TOTALS_ZERO_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -    0
"""
TOTALS_ZERO_PERCENT = """\
--------------------------------------------------------------------------------
TOTALS                                                         0%    5    5   10
"""
TOTALS_ZERO_PERCENT_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -   10
"""
TOTALS_ALL_PASSING = """\
--------------------------------------------------------------------------------
TOTALS                                                       100%    0    0   10
"""
TOTALS_ALL_PASSING_NO_RUN = """\
--------------------------------------------------------------------------------
TOTALS                                                         -     -    -   10
"""
TOTALS_SUMMARIZE = """\
--------------------------------------------------------------------------------
TOTALS                                                        71%    1    1    7
"""

SUMMARIZE = DUMMY_HEADER + BODY + TOTALS_SUMMARIZE


class summarizeTestCase(reportersTestCase):

    def setUpUp(self):
        self.summarize = _Summarize()
        self.summarize.base = 'testostertests'
        self.summarize.quiet = True
        self.summarize.recursive = True
        self.summarize.run = True
        self.summarize.stopwords = ()


    # __call__
    # ========

    def testSummarize(self):
        expected = SUMMARIZE
        actual = self.summarize('testostertests')
        self.assertEqual(expected, actual)


    # get_modules
    # ===========

    def testGetModules(self):
        self.summarize.base = 'testostertests'
        mod = __import__('testostertests')
        expected = [mod, mod.itDoesExist]
        actual = self.summarize.get_modules()
        self.assertEqual(expected, actual)

    def testGetModulesNotRecursive(self):
        self.summarize.base = 'testostertests'
        self.summarize.recursive = False
        expected = [__import__('testostertests')]
        actual = self.summarize.get_modules()
        self.assertEqual(expected, actual)

    def testGetModulesStopWords(self):
        self.summarize.base = 'testostertests'
        self.summarize.stopwords = ('Does',)
        expected = [__import__('testostertests')]
        actual = self.summarize.get_modules()
        self.assertEqual(expected, actual)

    def testGetModulesEmptyStopWordsOk(self):
        self.summarize.base = 'testostertests'
        self.summarize.stopwords = ('',)
        mod = __import__('testostertests')
        expected = [mod, mod.itDoesExist]
        actual = self.summarize.get_modules()
        self.assertEqual(expected, actual)


    # print_header
    # ============

    def testPrintHeader(self):
        self.summarize.print_header()
        actual = self.summarize.report.getvalue()
        expected = DUMMY_HEADER
        self.assertEqual(expected, actual)


    # print_body
    # ==========

    def testPrintBody(self):
        self.summarize.base = 'testostertests'
        self.summarize.modules = self.summarize.get_modules()
        self.summarize.print_body()
        expected = BODY
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)
        self.assertEqual(self.summarize.tfail, 1)
        self.assertEqual(self.summarize.terr, 1)
        self.assertEqual(self.summarize.tall, 7)

    def testPrintBodyNotQuiet(self):
        self.summarize.base = 'testostertests'
        self.summarize.quiet = False
        self.summarize.modules = self.summarize.get_modules()
        self.summarize.print_body()
        expected = BODY_VERBOSE
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)
        self.assertEqual(self.summarize.tfail, 1)
        self.assertEqual(self.summarize.terr, 1)
        self.assertEqual(self.summarize.tall, 7)

    def testPrintBodyNotQuietNotRecursive(self):
        self.summarize.base = 'testostertests'
        self.summarize.quiet = False
        self.summarize.recursive = False
        self.summarize.modules = self.summarize.get_modules()
        self.summarize.print_body()
        expected = BODY
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)
        self.assertEqual(self.summarize.tfail, 1)
        self.assertEqual(self.summarize.terr, 1)
        self.assertEqual(self.summarize.tall, 5)

    def testPrintBodyNoRun(self):
        self.summarize.base = 'testostertests'
        self.summarize.run = False
        self.summarize.modules = self.summarize.get_modules()
        self.summarize.print_body()
        expected = BODY_FIND
        actual = self.summarize.report.getvalue()
        self.assertEqual(expected, actual)
        self.assertEqual(self.summarize.tfail, 0)
        self.assertEqual(self.summarize.terr, 0)
        self.assertEqual(self.summarize.tall, 7)


    # print_footer
    # ============

    def testPrintFooterBasicTotalsWithRun(self):
        self.summarize.tfail = 4
        self.summarize.terr = 5
        self.summarize.tall = 18
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_BASIC
        self.assertEqual(expected, actual)

    def testPrintFooterBasicTotalsNoRun(self):
        self.summarize.tfail = 4
        self.summarize.terr = 5
        self.summarize.tall = 18
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_BASIC_NO_RUN
        self.assertEqual(expected, actual)

    def testPrintFooterZeroTotalsWithRun(self):
        self.summarize.tfail = 0
        self.summarize.terr = 0
        self.summarize.tall = 0
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO
        self.assertEqual(expected, actual)

    def testPrintFooterZeroTotalsNoRun(self):
        self.summarize.tfail = 0
        self.summarize.terr = 0
        self.summarize.tall = 0
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO_NO_RUN
        self.assertEqual(expected, actual)

    def testPrintFooterZeroPercentWithRun(self):
        self.summarize.tfail = 5
        self.summarize.terr = 5
        self.summarize.tall = 10
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO_PERCENT
        self.assertEqual(expected, actual)

    def testPrintFooterZeroPercentNoRun(self):
        self.summarize.tfail = 5
        self.summarize.terr = 5
        self.summarize.tall = 10
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ZERO_PERCENT_NO_RUN
        self.assertEqual(expected, actual)

    def testPrintFooterAllPassing(self):
        self.summarize.tfail = 0
        self.summarize.terr = 0
        self.summarize.tall = 10
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ALL_PASSING
        self.assertEqual(expected, actual)

    def testPrintFooterAllPassingNoRun(self):
        self.summarize.tfail = 0
        self.summarize.terr = 0
        self.summarize.tall = 10
        self.summarize.run = False
        self.summarize.print_footer()
        actual = self.summarize.report.getvalue()
        expected = TOTALS_ALL_PASSING_NO_RUN
        self.assertEqual(expected, actual)

