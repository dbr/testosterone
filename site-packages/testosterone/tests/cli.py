import os
import tempfile
import unittest

from testosterone.cli.reporters import detail


DUMMY_MODULE = """\
import unittest

def my_program():
    print 'Hey there!'

class TestCase(unittest.TestCase):

    def test_passes(self):
        self.assert_(1)

    def test_does_nothing(self):
        pass

    def test_fails(self):
        self.assert_(0)

    def test_errs(self):
        raise StandardError('heck')

    def test_prints_stuff(self):
        my_program()

"""

DUMMY_OUTPUT_START="""\
-------------------------------<| testosterone |>-------------------------------
.EF..
======================================================================
ERROR: test_errs (itDoesExist.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):"""; """
  File "/usr/home/whit537/workbench/testosterone/bin/itDoesExist.py", line 12, in test_errs
    raise StandardError(\'heck\')
StandardError: heck

======================================================================
FAIL: test_fails (itDoesExist.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/home/whit537/workbench/testosterone/bin/itDoesExist.py", line 10, in test_fails
    self.assert_(0)
AssertionError

----------------------------------------------------------------------
Ran 5 tests in 0.002s"""; DUMMY_OUTPUT_END="""

FAILED (failures=1, errors=1)
"""


class TestCase(unittest.TestCase):

    # fixture
    # =======

    def setUp(self):
        self.filename = os.path.join(tempfile.gettempdir(), 'itDoesExist.py')
        self.tearDown()
        fp = open(self.filename, 'w+')
        fp.write(DUMMY_MODULE)

    def tearDown(self):
        if os.path.isfile(self.filename):
            os.remove(self.filename)


    # detail
    # ======

    def testDetailFailsForBadModule(self):
        self.assertRaises(ImportError, detail, 'probablyDoesntExist')

    def testDetailReturnsNormalUnitTestOutputWithOurBanner(self):
        actual = detail('itDoesExist')
        self.assert_(actual.startswith(DUMMY_OUTPUT_START))
        self.assert_(actual.endswith(DUMMY_OUTPUT_END))

    def testDetailDoesntContainProgramOutput(self):
        actual = detail('itDoesExist')
        self.assert_(actual.startswith(DUMMY_OUTPUT_START))
        self.assert_(actual.endswith(DUMMY_OUTPUT_END))


    # summarize
    # =========

    def testSummarize(self):
        pass
