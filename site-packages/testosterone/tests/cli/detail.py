import unittest

from testosterone.cli.reporters import detail
from testosterone.tests.cli.utils import reportersTestCase


OUTPUT_START="""\
-------------------------------<| testosterone |>-------------------------------
.EF..
======================================================================
ERROR: test_errs (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):"""; """
<snip>
StandardError: heck

======================================================================
FAIL: test_fails (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
<snip>
AssertionError

----------------------------------------------------------------------
Ran 5 tests in 0.002s"""; OUTPUT_END="""

FAILED (failures=1, errors=1)
"""


REPORT_SUCCESS = """\
-------------------------------<| testosterone |>-------------------------------
..
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
"""



class Detail(reportersTestCase):

    def testNoDotTriggersNameError(self):
        self.assertRaises(NameError, detail, 'needsADot')

    def testBadModuleTriggersImportError(self):
        self.assertRaises(ImportError, detail, 'probablyDoesntExist.TestCase')

    def testBadTestCaseNameAlsoTriggersImportError(self):
        self.assertRaises(ImportError, detail, 'testostertests.ToastCase')

    def testBadTestCaseTriggersTypeError(self):
        self.assertRaises(TypeError, detail, 'testostertests.itDoesExist')

    def testReturnsNormalUnitTestOutputWithOurBanner(self):
        actual = detail('testostertests.TestCase')
        start = actual[:len(OUTPUT_START)]
        end = actual[-len(OUTPUT_END):]
        self.assertEqual(start, OUTPUT_START)
        self.assertEqual(end, OUTPUT_END)

    def testDoesntContainProgramOutput(self):
        actual = detail('testostertests.TestCase')
        start = actual[:len(OUTPUT_START)]
        end = actual[-len(OUTPUT_END):]
        self.assertEqual(start, OUTPUT_START)
        self.assertEqual(end, OUTPUT_END)

    def testTestCaseInSubmodulesWorks(self):
        expected = REPORT_SUCCESS
        actual = detail('testostertests.itDoesExist.TestCase')
        self.assertEqual(expected, actual)
