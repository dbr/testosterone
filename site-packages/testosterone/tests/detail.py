from testosterone.interactive.detail import Detail
from testosterone.interactive.utils import RefreshError
from testosterone.tests.cli import reportersTestCase
from testosterone.tests.summary import BORKED_MODULE

RAW = """\
Hey there!
-------------------------------<| testosterone |>-------------------------------
.EF..
======================================================================
ERROR: test_errs (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/tmp/testostertests/__init__.py", line 21, in test_errs
    raise StandardError(\'heck\')
StandardError: heck

======================================================================
FAIL: test_fails (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/tmp/testostertests/__init__.py", line 18, in test_fails
    self.assert_(0)
AssertionError

----------------------------------------------------------------------
Ran 5 tests in 0.002s

FAILED (failures=1, errors=1)
"""

RESULT = """\
Ran 5 tests in 0.002s

FAILED (failures=1, errors=1)
"""

DATA = {
'test_errs' : ('error', """\
ERROR: test_errs (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/tmp/testostertests/__init__.py", line 21, in test_errs
    raise StandardError(\'heck\')
StandardError: heck

"""),
'test_fails' : ('failure', """\
FAIL: test_fails (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/tmp/testostertests/__init__.py", line 18, in test_fails
    self.assert_(0)
AssertionError

"""
)}




class TestCase(reportersTestCase):

    def setUpUp(self):
        self.detail = Detail('testostertests')

    def testCall(self):
        self.detail._call()
        expected = RAW
        actual = self.detail._Detail__raw
        self.assertEqual(expected, actual)

    def testCallCatchesErrorsInChildProcess(self):
        self.MODULE = BORKED_MODULE
        self.setUp()
        delattr(self, 'MODULE')
        self.assertRaises( RefreshError
                         , self.detail._call
                          )
        try:
            self.detail._call()
        except RefreshError, err:
            expected = 'Traceback (most recent call last):'
            actual = err.traceback
            self.assertEqual(expected, actual[:len(expected)])


    # _set_data
    # =========

    def testSetData(self):
        self.detail._Detail__raw = RAW
        self.detail._set_data()
        expected = DATA
        actual = self.detail.data
        self.assertEqual(expected, actual)

        expected = RESULT
        actual = self.detail.result
        self.assertEqual(expected, actual)


    def testFail(self):
        pass
        #self.assert_(0)

    def testError(self):
        raise "heck"
