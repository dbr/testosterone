from testosterone.interactive.detail import Detail
from testosterone.interactive.utils import RefreshError
from testosterone.tests.cli.utils import reportersTestCase


RAW = """\
Hey there!
-------------------------------<| testosterone |>-------------------------------
.EF..
======================================================================
ERROR: test_errs (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):"""; RAW2= """
  File "/tmp/testostertests/__init__.py", line 21, in test_errs
    raise StandardError(\'heck\')
StandardError: heck

======================================================================
FAIL: test_fails (testostertests.TestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/tmp/testostertests/__init__.py", line 18, in test_fails
    self.assert_(0)
AssertionError

----------------------------------------------------------------------
Ran 5 tests in 0.002s

FAILED (failures=1, errors=1)
"""
_RAW = RAW+RAW2

TOTALS = ('60%', '1', '1', '5')


# cross-platform hack
import os, tempfile
hack = os.path.join('', tempfile.gettempdir(), 'testostertests', '__init__.py')

DATA = {
'test_errs' : ['error', """\
Traceback (most recent call last):
  File "%s", line 21, in test_errs
    raise StandardError(\'heck\')
StandardError: heck""" % hack],
'test_fails' : ['failure', """\
Traceback (most recent call last):
  File "%s", line 18, in test_fails
    self.assert_(0)
AssertionError""" % hack
]}



class Basic(reportersTestCase):

    def setUpUp(self):
        self.detail = Detail('testostertests.TestCase')

    def testCall(self):
        try:
            self.detail._call()
        except RefreshError, err:
            raise StandardError(err.traceback)
        expected = RAW
        actual = self.detail._Detail__raw[:len(RAW)]
        self.assertEqual(expected, actual)

    def testCallCatchesErrorsInChildProcess(self):
        path = os.path.join( self.site_packages
                           , 'testostertests'
                           , '__init__.py'
                            )
        open(path, 'w+').write("wheeee!")
        self.assertRaises( RefreshError
                         , self.detail._call
                          )
        try:
            self.detail._call()
        except RefreshError, err:
            expected = 'Traceback (most recent call last):'
            actual = err.traceback
            self.assertEqual(expected, actual[:len(expected)])



    # _set_data
    # =========

    def testSetData(self):
        self.detail._Detail__raw = _RAW
        self.detail._set_data()
        expected = DATA
        actual = self.detail.data
        self.assertEqual(expected, actual)

        expected = TOTALS
        actual = self.detail.totals
        self.assertEqual(expected, actual)
