import unittest

from testosterone.interactive.utils import ScrollArea, DoneScrolling


def refuse_pass():
    pass
def refuse_raise():
    raise DoneScrolling


def stats(area):
    return ( area.numrows
           , area.selected
           , area.numitems
           , area.start
           , area.end
            )


class TestCase(unittest.TestCase):

    def setUp(self):
        self.area = ScrollArea(20, 30, 3)
        self.area.refuse = refuse_pass

    def testInit(self):
        expected = (20, 0, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)


    # scroll_one
    # ==========

    def testScrollOne(self):
        self.area.scroll_one()
        expected = (20, 1, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollDownThenUp(self):
        self.area.scroll_one()
        self.area.scroll_one(up=True)
        expected = (20, 0, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)


    # scroll
    # ======

    def testScroll(self):
        self.area.scroll(1)
        expected = (20, 1, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollToEdgeOfScreen(self):
        self.area.scroll(20)
        expected = (20, 20, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollJustPastEdgeOfScreen(self):
        self.area.scroll(21)
        expected = (20, 20, 30, 1, 21)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollWellPastEdgeOfScreen(self):
        self.area.scroll(25)
        expected = (20, 20, 30, 5, 25)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollToEdgeOfList(self):
        self.area.scroll(30)
        expected = (20, 20, 30, 10, 30)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollJustPastEdgeOfList(self):
        self.area.scroll(31)
        expected = (20, 20, 30, 10, 30)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollWellPastEdgeOfList(self):
        self.area.scroll(1000)
        expected = (20, 20, 30, 10, 30)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollTooFarDownTriggersRefusal(self):
        self.area.refuse = refuse_raise
        self.assertRaises(DoneScrolling, self.area.scroll, 1000)


    # scroll up

    def testScrollAllTheWayDownAndThenUpToEdgeOfList(self):
        self.area.scroll(30)
        expected = (20, 20, 30, 10, 30)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

        self.area.scroll(-30)
        expected = (20, 0, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollAllTheWayDownAndThenUpJustPastEdgeOfList(self):
        self.area.scroll(30)
        expected = (20, 20, 30, 10, 30)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

        self.area.scroll(-31)
        expected = (20, 0, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollAllTheWayDownAndThenUpWellPastEdgeOfList(self):
        self.area.scroll(30)
        expected = (20, 20, 30, 10, 30)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

        self.area.scroll(-1000)
        expected = (20, 0, 30, 0, 20)
        actual = stats(self.area)
        self.assertEqual(expected, actual)

    def testScrollTooFarUpTriggersRefusal(self):
        self.area.refuse = refuse_raise
        self.assertRaises(DoneScrolling, self.area.scroll, -1000)
