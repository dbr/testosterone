import unittest

from testosterone.interactive.summary import RefreshError, Summary
from testosterone.tests.cli import reportersTestCase

BORKED_MODULE = """\
import frobage

wheeee!
"""

RAW = """\
Hey there!
-------------------------------<| testosterone |>-------------------------------
MODULE                                                       PASS FAIL  ERR  ALL
--------------------------------------------------------------------------------
testostertests                                                60%    1    1    5
testostertests.itDoesExist                                   100%    0    0    2
--------------------------------------------------------------------------------
TOTALS                                                        71%    1    1    7
"""

TRACEBACK = """\
Traceback (most recent call last):
  File "./bin/testosterone", line 3, in ?
    raise SystemExit(main())
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/main.py", line 66, in main
    report = summarize(base, quiet, recursive, run, stopwords)
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/reporters.py", line 87, in __call__
    self.modules = self.get_modules()
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/reporters.py", line 100, in get_modules
    module = load(self.base)
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/utils.py", line 44, in load
    module = __import__(name)
  File "/tmp/testostertests/__init__.py", line 3, in ?
    from testostertests import itDoesExist
  File "/tmp/testostertests/itDoesExist.py", line 3
    wheeee!
          ^
SyntaxError: invalid syntax
"""

class TestCase(reportersTestCase):

    def setUpUp(self):
        self.summary = Summary()

    def testCall(self):
        expected = RAW
        actual = self.summary._call('testostertests', run=True)
        self.assertEqual(expected, actual)

    def testCallCatchesErrorsInChildProcess(self):
        self.MODULE = BORKED_MODULE
        self.setUp()
        delattr(self, 'MODULE')
        self.assertRaises( RefreshError
                         , self.summary._call
                         , 'testostertests'
                         , run=True
                          )
        expected = 'Traceback (most recent call last):'
        actual = self.summary.traceback
        self.assertEqual(expected, actual[:len(expected)])
