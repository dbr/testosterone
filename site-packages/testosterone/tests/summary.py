from testosterone.interactive.summary import RefreshError, Summary
from testosterone.tests.cli import reportersTestCase

BORKED_MODULE = """\
import frobage

wheeee!
"""

RAW = """\
Hey there!
-------------------------------<| testosterone |>-------------------------------
MODULE                                                       PASS FAIL  ERR  ALL
--------------------------------------------------------------------------------
testostertests                                                60%    1    1    5
testostertests.itDoesExist                                   100%    0    0    2
--------------------------------------------------------------------------------
TOTALS                                                        71%    1    1    7
"""
LINES = [ 'Hey there!'
, '-------------------------------<| testosterone |>-------------------------------'
, 'MODULE                                                       PASS FAIL  ERR  ALL'
, '--------------------------------------------------------------------------------'
, 'testostertests                                                60%    1    1    5'
, 'testostertests.itDoesExist                                   100%    0    0    2'
, '--------------------------------------------------------------------------------'
]


RAW_ALL_PASSING = """\
Hey there!
-------------------------------<| testosterone |>-------------------------------
MODULE                                                       PASS FAIL  ERR  ALL
--------------------------------------------------------------------------------
testostertests                                                60%    0    0    5
testostertests.itDoesExist                                   100%    0    0    2
--------------------------------------------------------------------------------
TOTALS                                                       100%    0    0    7
"""
LINES_ALL_PASSING = [ 'Hey there!'
, '-------------------------------<| testosterone |>-------------------------------'
, 'MODULE                                                       PASS FAIL  ERR  ALL'
, '--------------------------------------------------------------------------------'
, 'testostertests                                                60%    0    0    5'
, 'testostertests.itDoesExist                                   100%    0    0    2'
, '--------------------------------------------------------------------------------'
]


RAW_DOTTED = """\
Hey there!
-------------------------------<| testosterone |>-------------------------------
MODULE                                                       PASS FAIL  ERR  ALL
--------------------------------------------------------------------------------
testostertests.itDoesExist                                   100%    0    0    2
--------------------------------------------------------------------------------
TOTALS                                                        71%    1    1    7
"""
LINES_DOTTED = [ 'Hey there!'
, '-------------------------------<| testosterone |>-------------------------------'
, 'MODULE                                                       PASS FAIL  ERR  ALL'
, '--------------------------------------------------------------------------------'
, 'testostertests.itDoesExist                                   100%    0    0    2'
, '--------------------------------------------------------------------------------'
]
DATA_DOTTED = {
    'testostertests.itDoesExist': ['100%', '0', '0', '2', True, True]
   }


TRACEBACK = """\
Traceback (most recent call last):
  File "./bin/testosterone", line 3, in ?
    raise SystemExit(main())
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/main.py", line 66, in main
    report = summarize(base, quiet, recursive, run, stopwords)
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/reporters.py", line 87, in __call__
    self.modules = self.get_modules()
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/reporters.py", line 100, in get_modules
    module = load(self.base)
  File "/usr/home/whit537/workbench/testosterone/site-packages/testosterone/cli/utils.py", line 44, in load
    module = __import__(name)
  File "/tmp/testostertests/__init__.py", line 3, in ?
    from testostertests import itDoesExist
  File "/tmp/testostertests/itDoesExist.py", line 3
    wheeee!
          ^
SyntaxError: invalid syntax
"""

class TestCase(reportersTestCase):

    def setUpUp(self):
        self.summary = Summary()


    # _call
    # =====

    def testCall(self):
        self.summary.base = 'testostertests'
        self.summary.run = True
        self.summary._call()
        expected = RAW
        actual = self.summary._Summary__raw
        self.assertEqual(expected, actual)

    def testCallCatchesErrorsInChildProcess(self):
        self.MODULE = BORKED_MODULE
        self.setUp()
        delattr(self, 'MODULE')
        self.summary.base = 'testostertests'
        self.summary.run = True
        self.assertRaises( RefreshError
                         , self.summary._call
                          )
        try:
            self.summary._call()
        except RefreshError, err:
            expected = 'Traceback (most recent call last):'
            actual = err.traceback
            self.assertEqual(expected, actual[:len(expected)])


    # _set_totals
    # ===========

    def testSetTotals(self):
        self.summary._Summary__raw = RAW
        self.summary._set_totals()

        expected = LINES
        actual = self.summary._Summary__lines
        self.assertEqual(expected, actual)

        expected = ('71%', '1', '1', '7')
        actual = self.summary.totals
        self.assertEqual(expected, actual)

    def testSetTotalsAllPassing(self):
        self.summary._Summary__raw = RAW_ALL_PASSING
        self.summary._set_totals()

        expected = LINES_ALL_PASSING
        actual = self.summary._Summary__lines
        self.assertEqual(expected, actual)

        expected = ('100%', '0', '0', '7')
        actual = self.summary.totals
        self.assertEqual(expected, actual)

    def testSetTotalsDotted(self):
        self.summary._Summary__raw = RAW_DOTTED
        self.summary._set_totals()

        expected = LINES_DOTTED
        actual = self.summary._Summary__lines
        self.assertEqual(expected, actual)

        expected = ('71%', '1', '1', '7')
        actual = self.summary.totals
        self.assertEqual(expected, actual)



    # _set_data
    # =========

    def testSetData(self):
        self.summary._Summary__raw = RAW
        self.summary._set_totals()

        expected = LINES
        actual = self.summary._Summary__lines
        self.assertEqual(expected, actual)

        expected = ('71%', '1', '1', '7')
        actual = self.summary.totals
        self.assertEqual(expected, actual)

    def testSetDataDotted(self):
        self.summary._Summary__lines = LINES_DOTTED
        self.summary._set_data()
        expected = DATA_DOTTED
        actual = self.summary.data
        self.assertEqual(expected, actual)

